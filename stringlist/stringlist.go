// Generated by listgen. DO NOT EDIT.
// Command: listgen -package stringlist -type string -cmp "if a < b {return -1}; if a > b {return 1}; return 0;"

package stringlist

import (
	"errors"
	"fmt"
	"sync/atomic"
	"unsafe"
)

var (
	ErrValueExists   = errors.New("stringlist: value exists")
	ErrValueNotFound = errors.New("stringlist: value does not exist")
)

type StringList struct {
	head unsafe.Pointer
}

type StringListNode struct {
	val  string
	next unsafe.Pointer
}

type StringListIterator struct {
	list    *StringList
	current *StringListNode
	valid   bool
}

func StringListCmp(a, b string) int {
	if a < b {
		return -1
	}
	if a > b {
		return 1
	}
	return 0
}

// NewList returns a lock-free ordered list with values of type string.
func NewList() *StringList {
	return &StringList{}
}

// Insert inserts v into the list in order. An error is returned if v is already present.
func (l *StringList) Insert(v string) error {
	n := &StringListNode{
		val:  v,
		next: nil,
	}

HEAD:
	headPtr := atomic.LoadPointer(&l.head)

	if headPtr == nil {
		if !atomic.CompareAndSwapPointer(&l.head, headPtr, unsafe.Pointer(n)) {
			goto HEAD
		}

		return nil
	}

	headNode := (*StringListNode)(headPtr)
	if StringListCmp(headNode.val, n.val) > 0 {
		n.next = headPtr
		if !atomic.CompareAndSwapPointer(&l.head, headPtr, unsafe.Pointer(n)) {
			goto HEAD
		}

		return nil
	}

NEXT:
	nextPtr := atomic.LoadPointer(&headNode.next)
	if nextPtr == nil {
		if !atomic.CompareAndSwapPointer(&headNode.next, nextPtr, unsafe.Pointer(n)) {
			goto NEXT
		}

		return nil
	}

	nextNode := (*node)(nextPtr)
	if StringListCmp(nextNode.val, n.val) > 0 {
		n.next = nextPtr
		if !atomic.CompareAndSwapPointer(&headNode.next, nextPtr, unsafe.Pointer(n)) {
			goto NEXT
		}

		return nil
	}

	if StringListCmp(nextNode.val, n.val) == 0 {
		return ErrValueExists
	}

	headNode = nextNode
	goto NEXT
}

// Remove removes v from the list. An error is returned if v is not present.
func (l *StringList) Remove(v string) error {
HEAD:
	headPtr := atomic.LoadPointer(&l.head)

	if headPtr == nil {
		return ErrValueNotFound
	}

	headNode := (*node)(headPtr)

	if StringListCmp(headNode.val, v) == 0 {
		nextPtr := atomic.LoadPointer(&headNode.next)
		if !atomic.CompareAndSwapPointer(&l.head, headPtr, nextPtr) {
			goto HEAD
		}

		return nil
	}

NEXT:
	nextPtr := atomic.LoadPointer(&headNode.next)
	if nextPtr == nil {
		return ErrValueNotFound
	}

	nextNode := (*node)(nextPtr)

	if StringListCmp(nextNode.val, v) > 0 {
		return ErrValueNotFound
	}

	if StringListCmp(nextNode.val, v) == 0 {
		replacementPtr := atomic.LoadPointer(&nextNode.next)
		if !atomic.CompareAndSwapPointer(&headNode.next, nextPtr, replacementPtr) {
			goto NEXT
		}

		return nil
	}

	headNode = nextNode
	goto NEXT
}

// NewIterator returns a new iterator. Values can be read
// after Next is called.
func (l *StringList) NewIterator() *StringListIterator {
	return &StringListIterator{
		list:  l,
		valid: true,
	}
}

// Next positions the iterator at the next node in the list.
// Next will be positioned at the head on the first call.
// The return value will be true if a value can be read from the list.
func (i *StringListIterator) Next() bool {
	if !i.valid {
		return false
	}

	if i.current == nil {
		if i.list.head == nil {
			i.valid = false
			return false
		}

		i.current = (*node)(i.list.head)
		return true
	}

	i.current = (*node)(i.current.next)

	i.valid = i.current != nil
	return i.valid
}

// Value reads the value from the current node of the iterator.
// An error is returned if a value cannot be retrieved.
func (i *StringListIterator) Value() (string, error) {
	var v string

	if i.current == nil {
		return v, ErrValueNotFound
	}

	return i.current.val, nil
}

// String returns the string representation of the list.
func (l *StringList) String() string {
	output := ""

	if l.head == nil {
		return output
	}

	i := l.NewIterator()

	for i.Next() {
		v, _ := i.Value()
		output += fmt.Sprintf("%v ", v)
	}

	return output
}
