package main

import (
	"text/template"
)

var sourceTempl = template.Must(template.New("list").Parse(`// Generated by listgen. DO NOT EDIT.
// Command: listgen -package {{.Package}} -type {{.ValueType}} -cmp "{{.CompareFunction}}"

package {{.Package}}

import (
	"errors"
	"fmt"
	"sync/atomic"
	"unsafe"
)

var (
	ErrValueExists   = errors.New("{{.Package}}: value exists")
	ErrValueNotFound = errors.New("{{.Package}}: value does not exist")
)

type {{.ListType}} struct {
	head unsafe.Pointer
}

type {{.ListType}}Node struct {
	val  {{.ValueType}}
	next unsafe.Pointer
}

type {{.ListType}}Iterator struct {
	list    *{{.ListType}}
	current *{{.ListType}}Node
	valid   bool
}

func {{.ListType}}Cmp(a, b {{.ValueType}}) int {
{{.CompareFunction}}
}

// NewList returns a lock-free ordered list with values of type {{.ValueType}}.
func NewList() *{{.ListType}} {
	return &{{.ListType}}{}
}

// Insert inserts v into the list in order. An error is returned if v is already present.
func (l *{{.ListType}}) Insert(v {{.ValueType}}) error {
	n := &{{.ListType}}Node{
		val:  v,
		next: nil,
	}

HEAD:
	headPtr := atomic.LoadPointer(&l.head)

	if headPtr == nil {
		if !atomic.CompareAndSwapPointer(&l.head, headPtr, unsafe.Pointer(n)) {
			goto HEAD
		}

		return nil
	}

	headNode := (*{{.ListType}}Node)(headPtr)
	if {{.ListType}}Cmp(headNode.val, n.val) > 0 {
		n.next = headPtr
		if !atomic.CompareAndSwapPointer(&l.head, headPtr, unsafe.Pointer(n)) {
			goto HEAD
		}

		return nil
	}

NEXT:
	nextPtr := atomic.LoadPointer(&headNode.next)
	if nextPtr == nil {
		if !atomic.CompareAndSwapPointer(&headNode.next, nextPtr, unsafe.Pointer(n)) {
			goto NEXT
		}

		return nil
	}

	nextNode := (*node)(nextPtr)
	if {{.ListType}}Cmp(nextNode.val, n.val) > 0 {
		n.next = nextPtr
		if !atomic.CompareAndSwapPointer(&headNode.next, nextPtr, unsafe.Pointer(n)) {
			goto NEXT
		}

		return nil
	}

	if {{.ListType}}Cmp(nextNode.val, n.val) == 0 {
		return ErrValueExists
	}

	headNode = nextNode
	goto NEXT
}

// Remove removes v from the list. An error is returned if v is not present.
func (l *{{.ListType}}) Remove(v {{.ValueType}}) error {
HEAD:
	headPtr := atomic.LoadPointer(&l.head)

	if headPtr == nil {
		return ErrValueNotFound
	}

	headNode := (*node)(headPtr)

	if {{.ListType}}Cmp(headNode.val, v) == 0 {
		nextPtr := atomic.LoadPointer(&headNode.next)
		if !atomic.CompareAndSwapPointer(&l.head, headPtr, nextPtr) {
			goto HEAD
		}

		return nil
	}

NEXT:
	nextPtr := atomic.LoadPointer(&headNode.next)
	if nextPtr == nil {
		return ErrValueNotFound
	}

	nextNode := (*node)(nextPtr)

	if {{.ListType}}Cmp(nextNode.val, v) > 0 {
		return ErrValueNotFound
	}

	if {{.ListType}}Cmp(nextNode.val, v) == 0 {
		replacementPtr := atomic.LoadPointer(&nextNode.next)
		if !atomic.CompareAndSwapPointer(&headNode.next, nextPtr, replacementPtr) {
			goto NEXT
		}

		return nil
	}

	headNode = nextNode
	goto NEXT
}

// NewIterator returns a new iterator. Values can be read
// after Next is called.
func (l *{{.ListType}}) NewIterator() *{{.ListType}}Iterator {
	return &{{.ListType}}Iterator{
		list:  l,
		valid: true,
	}
}

// Next positions the iterator at the next node in the list.
// Next will be positioned at the head on the first call.
// The return value will be true if a value can be read from the list.
func (i *{{.ListType}}Iterator) Next() bool {
	if !i.valid {
		return false
	}

	if i.current == nil {
		if i.list.head == nil {
			i.valid = false
			return false
		}

		i.current = (*node)(i.list.head)
		return true
	}

	i.current = (*node)(i.current.next)

	i.valid = i.current != nil
	return i.valid
}

// Value reads the value from the current node of the iterator.
// An error is returned if a value cannot be retrieved.
func (i *{{.ListType}}Iterator) Value() ({{.ValueType}}, error) {
	var v {{.ValueType}}

	if i.current == nil {
		return v, ErrValueNotFound
	}

	return i.current.val, nil
}

// String returns the string representation of the list.
func (l *{{.ListType}}) String() string {
	output := ""

	if l.head == nil {
		return output
	}

	i := l.NewIterator()

	for i.Next() {
		v, _ := i.Value()
		output += fmt.Sprintf("%v ", v)
	}

	return output
}
`))
